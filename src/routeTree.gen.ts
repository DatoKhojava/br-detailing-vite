/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermsAndConditionsImport } from './routes/terms-and-conditions'
import { Route as LoginImport } from './routes/login'
import { Route as HistoryImport } from './routes/history'
import { Route as FAQImport } from './routes/FAQ'
import { Route as ProtectedRouteImport } from './routes/_protected/route'
import { Route as ProtectedDashboardIndexImport } from './routes/_protected/dashboard/index'
import { Route as ProtectedDashboardListImport } from './routes/_protected/dashboard/list'
import { Route as ProtectedDashboardCalendarImport } from './routes/_protected/dashboard/calendar'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const TermsAndConditionsRoute = TermsAndConditionsImport.update({
  id: '/terms-and-conditions',
  path: '/terms-and-conditions',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const HistoryRoute = HistoryImport.update({
  id: '/history',
  path: '/history',
  getParentRoute: () => rootRoute,
} as any)

const FAQRoute = FAQImport.update({
  id: '/FAQ',
  path: '/FAQ',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRouteRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProtectedDashboardIndexRoute = ProtectedDashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => ProtectedRouteRoute,
} as any)

const ProtectedDashboardListRoute = ProtectedDashboardListImport.update({
  id: '/dashboard/list',
  path: '/dashboard/list',
  getParentRoute: () => ProtectedRouteRoute,
} as any)

const ProtectedDashboardCalendarRoute = ProtectedDashboardCalendarImport.update(
  {
    id: '/dashboard/calendar',
    path: '/dashboard/calendar',
    getParentRoute: () => ProtectedRouteRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRoute
    }
    '/FAQ': {
      id: '/FAQ'
      path: '/FAQ'
      fullPath: '/FAQ'
      preLoaderRoute: typeof FAQImport
      parentRoute: typeof rootRoute
    }
    '/history': {
      id: '/history'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof HistoryImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/terms-and-conditions': {
      id: '/terms-and-conditions'
      path: '/terms-and-conditions'
      fullPath: '/terms-and-conditions'
      preLoaderRoute: typeof TermsAndConditionsImport
      parentRoute: typeof rootRoute
    }
    '/_protected/dashboard/calendar': {
      id: '/_protected/dashboard/calendar'
      path: '/dashboard/calendar'
      fullPath: '/dashboard/calendar'
      preLoaderRoute: typeof ProtectedDashboardCalendarImport
      parentRoute: typeof ProtectedRouteImport
    }
    '/_protected/dashboard/list': {
      id: '/_protected/dashboard/list'
      path: '/dashboard/list'
      fullPath: '/dashboard/list'
      preLoaderRoute: typeof ProtectedDashboardListImport
      parentRoute: typeof ProtectedRouteImport
    }
    '/_protected/dashboard/': {
      id: '/_protected/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardIndexImport
      parentRoute: typeof ProtectedRouteImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteRouteChildren {
  ProtectedDashboardCalendarRoute: typeof ProtectedDashboardCalendarRoute
  ProtectedDashboardListRoute: typeof ProtectedDashboardListRoute
  ProtectedDashboardIndexRoute: typeof ProtectedDashboardIndexRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedDashboardCalendarRoute: ProtectedDashboardCalendarRoute,
  ProtectedDashboardListRoute: ProtectedDashboardListRoute,
  ProtectedDashboardIndexRoute: ProtectedDashboardIndexRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '': typeof ProtectedRouteRouteWithChildren
  '/FAQ': typeof FAQRoute
  '/history': typeof HistoryRoute
  '/login': typeof LoginRoute
  '/terms-and-conditions': typeof TermsAndConditionsRoute
  '/dashboard/calendar': typeof ProtectedDashboardCalendarRoute
  '/dashboard/list': typeof ProtectedDashboardListRoute
  '/dashboard': typeof ProtectedDashboardIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '': typeof ProtectedRouteRouteWithChildren
  '/FAQ': typeof FAQRoute
  '/history': typeof HistoryRoute
  '/login': typeof LoginRoute
  '/terms-and-conditions': typeof TermsAndConditionsRoute
  '/dashboard/calendar': typeof ProtectedDashboardCalendarRoute
  '/dashboard/list': typeof ProtectedDashboardListRoute
  '/dashboard': typeof ProtectedDashboardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/FAQ': typeof FAQRoute
  '/history': typeof HistoryRoute
  '/login': typeof LoginRoute
  '/terms-and-conditions': typeof TermsAndConditionsRoute
  '/_protected/dashboard/calendar': typeof ProtectedDashboardCalendarRoute
  '/_protected/dashboard/list': typeof ProtectedDashboardListRoute
  '/_protected/dashboard/': typeof ProtectedDashboardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/FAQ'
    | '/history'
    | '/login'
    | '/terms-and-conditions'
    | '/dashboard/calendar'
    | '/dashboard/list'
    | '/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/FAQ'
    | '/history'
    | '/login'
    | '/terms-and-conditions'
    | '/dashboard/calendar'
    | '/dashboard/list'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/FAQ'
    | '/history'
    | '/login'
    | '/terms-and-conditions'
    | '/_protected/dashboard/calendar'
    | '/_protected/dashboard/list'
    | '/_protected/dashboard/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
  FAQRoute: typeof FAQRoute
  HistoryRoute: typeof HistoryRoute
  LoginRoute: typeof LoginRoute
  TermsAndConditionsRoute: typeof TermsAndConditionsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
  FAQRoute: FAQRoute,
  HistoryRoute: HistoryRoute,
  LoginRoute: LoginRoute,
  TermsAndConditionsRoute: TermsAndConditionsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_protected",
        "/FAQ",
        "/history",
        "/login",
        "/terms-and-conditions"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_protected": {
      "filePath": "_protected/route.tsx",
      "children": [
        "/_protected/dashboard/calendar",
        "/_protected/dashboard/list",
        "/_protected/dashboard/"
      ]
    },
    "/FAQ": {
      "filePath": "FAQ.tsx"
    },
    "/history": {
      "filePath": "history.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/terms-and-conditions": {
      "filePath": "terms-and-conditions.tsx"
    },
    "/_protected/dashboard/calendar": {
      "filePath": "_protected/dashboard/calendar.tsx",
      "parent": "/_protected"
    },
    "/_protected/dashboard/list": {
      "filePath": "_protected/dashboard/list.tsx",
      "parent": "/_protected"
    },
    "/_protected/dashboard/": {
      "filePath": "_protected/dashboard/index.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
